#include <BMP280_DEV.h>
#include <Device.h>
#include <Wire.h>
#include <Servo.h>
#include <MPU9250.h>
#include <math.h>
#include <PID_v1.h>
#include <Arduino.h>

#define PIN_INPUT 0
#define PIN_OUTPUT 2

double Setpoint, Input, Output;
double Kp = 0.04, Kd = 0.9, Ki = 0.03;
PID myPID(&Input, &Output, &Setpoint, Kp, Ki, Kd, DIRECT);

float PWM_roll, PWM_yaw, PWM_pitch, PWM_thrust;

int PIN_1 = 2, PIN_2 = 3, PIN_3 = 4, PIN_4 = 5;
float PID_roll, PID_yaw, PID_pitch;
float temperature, pressure, alt;

Servo ESC1, ESC2, ESC3, ESC4;  // create servo object to control the ESC
BMP280_DEV bmp280;
MPU9250 mpu;

void setup()
{
  Serial.begin(9600);
  Wire.begin();
  bmp280.begin(0X76);                                // Default initialisation, place the BMP280 into SLEEP_MODE
  bmp280.setTimeStandby(TIME_STANDBY_1000MS);     // Set the standby time to 1s
  bmp280.startNormalConversion();                 // Start NORMAL conversion mode
  mpu.setup();

  ESC1.attach(PIN_1, 1000, 2000); //CW 1
  ESC2.attach(PIN_2, 1000, 2000); //CW 3
  ESC3.attach(PIN_3, 1000, 2000); //CCW 2
  ESC4.attach(PIN_4, 1000, 2000); //CCW 4
  delay(7000);
  ESC1.write(0);
  ESC2.write(0);
  ESC3.write(0);
  ESC4.write(0);
  delay(3000);
  ESC1.write(180);
  ESC2.write(180);
  ESC3.write(180);
  ESC4.write(180);

  mpu.update();
  bmp280.getMeasurements(temperature, pressure, alt);

  Input = PID_roll;
  Setpoint = 0;
  myPID.SetMode(AUTOMATIC);
}
void loop()
{
  PIDE();
  altitud();
  rollpitchyaw();
}
void PIDE()
{
  Input = PID_roll;
  myPID.Compute();
  PWM_roll = map(Output, 0, 255, 0, 180);
  ESC2.write(PWM_roll);//CCW
  ESC3.write(PWM_roll);//CW
  PID_roll = PID_roll - Kp;
  ESC1.write(PWM_roll);//CW
  ESC4.write(PWM_roll);//CCW
  Serial.print(Output);
  Serial.print(" ");

  Input = PID_pitch;
  myPID.Compute();
  PWM_pitch = map(Output, 0, 255, 0, 180);
  ESC1.write(PWM_pitch);//CW
  ESC2.write(PWM_pitch);//CCW
  PID_pitch = PID_pitch - Kp;
  ESC3.write(PWM_pitch);//CW
  ESC4.write(PWM_pitch);//CCW
  Serial.print(Output);
  Serial.print(" ");

  Input = PID_yaw;
  myPID.Compute();
  PWM_yaw = map(Output, 0, 255, 0, 180);
  ESC1.write(PWM_yaw);//CW
  ESC3.write(PWM_yaw);//CW
  PID_yaw = PID_yaw - Kp;
  ESC2.write(PWM_yaw);//CCW
  ESC4.write(PWM_yaw);//CCW
  Serial.print(Output);
  Serial.print(" ");

  Input = alt;
  myPID.Compute();
  PWM_thrust = map(Output, 0, 255, 0, 180);
  ESC1.write(PWM_thrust);//CW
  ESC3.write(PWM_thrust);//CW
  ESC2.write(PWM_thrust);//CCW
  ESC4.write(PWM_thrust);//CCW
  Serial.println("");
}
void rollpitchyaw()
{
  static uint32_t prev_ms = millis();
  if ((millis() - prev_ms) > 16)
  {
    mpu.update();
    PID_pitch = mpu.getPitch();
    PID_yaw = mpu.getYaw();
    PID_roll = mpu.getRoll();
    prev_ms = millis();
  }
}
void altitud()
{
  bmp280.getMeasurements(temperature, pressure, alt);
}
